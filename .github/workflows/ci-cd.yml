name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'runbooks/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'runbooks/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_FRONTEND_REPOSITORY: resilibot-frontend
  ECR_AGENT_REPOSITORY: resilibot-agent
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

jobs:
  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run type check
      run: npx tsc --noEmit
    
    - name: Run tests
      run: npm test
      env:
        NEXT_PUBLIC_API_URL: ${{ env.NEXT_PUBLIC_API_URL }}
    
    - name: Run E2E tests
      run: npm run cypress:run
      env:
        NEXT_PUBLIC_API_URL: ${{ env.NEXT_PUBLIC_API_URL }}
    
    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: frontend/coverage/
    
    - name: Build
      run: npm run build

  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements.txt
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=functions --cov-report=xml
        
    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: backend/coverage.xml

  # Infrastructure Tests
  infrastructure-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infrastructure
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: infrastructure/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run CDK synth
      run: npm run cdk synth || true

  # Docker Build
  docker-build:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: ${{ env.ECR_FRONTEND_REPOSITORY }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NEXT_PUBLIC_API_URL=${{ env.NEXT_PUBLIC_API_URL }}
    
    - name: Build Agent Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: ${{ env.ECR_AGENT_REPOSITORY }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to AWS (only on main branch)
  deploy-aws:
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, infrastructure-test, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and push Docker images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push frontend image
        docker build -t $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$IMAGE_TAG ./frontend \
          --build-arg NEXT_PUBLIC_API_URL=${{ env.NEXT_PUBLIC_API_URL }}
        docker push $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:latest

        # Build and push agent image
        docker build -t $ECR_REGISTRY/$ECR_AGENT_REPOSITORY:$IMAGE_TAG ./backend
        docker push $ECR_REGISTRY/$ECR_AGENT_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_AGENT_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_AGENT_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_AGENT_REPOSITORY:latest
    
    - name: Setup Node.js for CDK
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install AWS CDK
      run: npm install -g aws-cdk
    
    - name: Deploy infrastructure
      working-directory: ./infrastructure
      run: |
        npm ci
        cdk deploy --all --require-approval never

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner - Frontend
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './frontend'
        format: 'sarif'
        output: 'trivy-frontend-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Run Trivy vulnerability scanner - Backend
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './backend'
        format: 'sarif'
        output: 'trivy-backend-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Run SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.organization=${{ github.repository_owner }}
          -Dsonar.projectKey=${{ github.repository_owner }}_resilibot
          -Dsonar.python.coverage.reportPaths=backend/coverage.xml
          -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-*-results.sarif'
  
  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-aws, security-scan]
    if: always()
    
    steps:
    - name: Send Slack notification
      uses: slackapi/slack-github-action@v1.25.0
      with:
        channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
        slack-message: |
          *ResiliBot CI/CD Pipeline Result*
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Status: ${{ needs.deploy-aws.result == 'success' && '✅ Success' || '❌ Failure' }}
          Commit: ${{ github.event.head_commit.message }}
          Security Scan: ${{ needs.security-scan.result == 'success' && '✅ Passed' || '⚠️ Check Required' }}
          Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
